#!/usr/bin/env perl
#*===========================================================================*
#*                                                                           *
#*  codefmt - Code formatting tool                                           *
#*                                                                           *
#*  Copyright (c) 2019 Frederic Jardon  <frederic.jardon@gmail.com>          *
#*                                                                           *
#*  ------------------ GPL Licensed Source Code ------------------           *
#*  Frederic Jardon makes this software available under the GNU              *
#*  General Public License (GPL) license for open source projects.           *
#*  For details of the GPL license please see www.gnu.org or read            *
#*  the file license.gpl provided in this package.                           *
#*                                                                           *
#*  This program is free software; you can redistribute it and/or            *
#*  modify it under the terms of the GNU General Public License as           *
#*  published by the Free Software Foundation; either version 3 of           *
#*  the License, or (at your option) any later version.                      *
#*                                                                           *
#*  This program is distributed in the hope that it will be useful,          *
#*  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
#*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
#*  GNU General Public License for more details.                             *
#*                                                                           *
#*  You should have received a copy of the GNU General Public                *
#*  License along with this program in the file 'license.gpl'; if            *
#*  not, see <http://www.gnu.org/licenses/>.                                 *
#*  --------------------------------------------------------------           *
#*===========================================================================*

use strict;
use warnings 'all';
use Data::Dumper;
use Carp;
use Getopt::Long qw(GetOptionsFromArray :config no_ignore_case pass_through);
use List::Util qw(max sum);
use Pod::Usage;

sub usage {
    my $exitval = scalar @_;
    map { print STDERR "ERROR: ".$_."\n" } @_;
    pod2usage(-exitval => $exitval);
}

# CLI arguments processing
my ($opt_help,
    $opt_append,
    $opt_copy,
    $opt_end_string,
    $opt_extract,
    $opt_overwrite,
    $opt_start_string,
);

GetOptionsFromArray(\@ARGV,
    'h|help'         => \$opt_help,
    'a|append=s'     => \$opt_append,
    'c|copy'         => \$opt_copy,
    'e|end=s'        => \$opt_end_string,
    'o|overwrite=s'  => \$opt_overwrite,
    's|start=s'      => \$opt_start_string,
    'x|extract'      => \$opt_extract,
) or croak "Error while parsing command-line arguments";

# Handle help option
usage if ($opt_help);
usage("Options: '-a' and '-o' are mutually exclusive") if (defined($opt_append) and defined($opt_overwrite));
usage("Options: '-c' and '-x' are mutually exclusive") if (defined($opt_copy) and defined($opt_extract));

my ($open_mode, $filename);
$open_mode = '>>' if(defined($opt_append));
$open_mode = '>'  if(defined($opt_overwrite));
$filename //= $opt_append;
$filename //= $opt_overwrite;
usage("One option out of '-a' or '-o' is required") if(!defined($open_mode));


open(FILE, $open_mode, $filename) or die("Unable to open: '".$filename."'");
while(my $line = <STDIN>) {
    print STDOUT $line if(defined($opt_copy));
    print FILE $line;
}
close(FILE);


exit 0;

__END__
=head1 NAME

codemv - Code Mover Tool

=head1 SYNOPSIS

B<codemv> B<-h>|B<--help>

B<codemv> [B<OPTIONS>]...

=head1 DESCRIPTION

This tool divert part of its input to a specified file.

=head1 OPTIONS

=over

=item B<-h>|B<--help>

Print the usage, help and version information for this program and exit.

=item B<-a> I<FILE>|B<--append>=I<FILE>

Sets the file where diverted input is appended. This option is mutually
exclusive with the B<-o> option.

=item B<-c>|B<--copy>

Copy to stdout the whole input.

=item B<-o> I<FILE>|B<--overwrite>=I<FILE>

Sets the file overwritten by the diverted input. This option is mutually
exclusive with the B<-o> option.

=back

=head1 SEE ALSO

fmt(1), column(1), codefmt(1)

=head1 AUTHOR

Frederic JARDON <frederic.jardon@gmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2019 by Frederic JARDON <frederic.jardon@gmail.com>

This program is free software; you can redistribute it and/or modify
it under the GPL license.

=cut

