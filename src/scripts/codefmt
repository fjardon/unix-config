#!/usr/bin/env perl
#*===========================================================================*
#*                                                                           *
#*  codefmt - Code formatting tool                                           *
#*                                                                           *
#*  Copyright (c) 2019 Frederic Jardon  <frederic.jardon@gmail.com>          *
#*                                                                           *
#*  ------------------ GPL Licensed Source Code ------------------           *
#*  Frederic Jardon makes this software available under the GNU              *
#*  General Public License (GPL) license for open source projects.           *
#*  For details of the GPL license please see www.gnu.org or read            *
#*  the file license.gpl provided in this package.                           *
#*                                                                           *
#*  This program is free software; you can redistribute it and/or            *
#*  modify it under the terms of the GNU General Public License as           *
#*  published by the Free Software Foundation; either version 3 of           *
#*  the License, or (at your option) any later version.                      *
#*                                                                           *
#*  This program is distributed in the hope that it will be useful,          *
#*  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
#*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
#*  GNU General Public License for more details.                             *
#*                                                                           *
#*  You should have received a copy of the GNU General Public                *
#*  License along with this program in the file 'license.gpl'; if            *
#*  not, see <http://www.gnu.org/licenses/>.                                 *
#*  --------------------------------------------------------------           *
#*===========================================================================*

use strict;
use warnings 'all';
use Data::Dumper;
use Carp;
use Getopt::Long qw(GetOptionsFromArray :config no_ignore_case pass_through);
use List::Util qw(max sum);
use Pod::Usage;

sub shuffle_words_in_columns {
    my %args = @_;
    croak "words is not defined" if (!defined ($args{words}));
    croak "fmt is not defined"   if (!defined ($args{fmt}));

    my @words = @{$args{words}};
    my $fmt   = $args{fmt};

    my $n_cols = length ($fmt);
    my $n_rows = int ((@words+$n_cols-1)/$n_cols);
    my @cols   = ();
    for (my $i=0; $i<$n_cols; ++$i) {
        my @indexes = map { $i+$n_cols*$_ } (0..($n_rows-1));
        my @column  = map { $_ //= '' } @words[@indexes];
        push (@cols, \@column);
    }
    return @cols;
}

sub line_width {
    my %args = @_;

    croak "cols is not defined" if (!defined ($args{cols}));

    my @cols      = @{$args{cols}};
    my $textwidth = $args{textwidth};
    my $c_sep     = $args{separator};
    my $eol_sep   = $args{eol_separator};
    $textwidth  //= 70;
    $c_sep      //= ' ';
    $eol_sep    //= ' \\';

    my $n_cols = @cols;
    my @widths = map { max (map scalar @{$_} ) } @cols;
    my $width  = ($n_cols - 1)*length ($c_sep) + sum (@widths) + length ($eol_sep);
    return $width;
}


sub format_args {
    my ($fmt, @args) = @_;
    $^A = '';
    formline ($fmt, @args);
    return ''.$^A;
}

sub format_columns_to_lines {
    my %args = @_;

    croak "cols is not defined"     if (!defined ($args{cols}));
    croak "fmt is not defined"      if (!defined ($args{fmt}));
    croak "n_words is not defined"  if (!defined ($args{n_words}));

    my @cols      = @{$args{cols}};
    my $fmt       = $args{fmt};
    my $textwidth = $args{textwidth};
    my $c_sep     = $args{separator};
    my $eol_sep   = $args{eol_separator};
    my $n_words   = $args{n_words};
    $textwidth  //= 70;
    $c_sep      //= ' ';
    $eol_sep    //= ' \\';

    my $eol_len   = length ($eol_sep);
    my $n_cols    = scalar @cols;
    my @c_indexes = (0..$#cols);
    my @widths    = map {
                        my $col = $_;
                        max (map {length ($_)} @{$col})
                    } @cols;

    my @perl_fmta = map {
                        my ($c, $width) = (substr ($fmt, $_, 1), $widths[$_]);
                        $width -= 1;
                        my $r = '@'.'<'x$width;
                        $r = '@'.'|'x$width if ($c eq 'c');
                        $r = '@'.'>'x$width if ($c eq 'r');
                        $r;
                    } @c_indexes;
    my $perl_fmt  = join ($c_sep, @perl_fmta);
    $perl_fmt    .= ' ^'.('<'x($eol_len-1))."\n";

    my $last_n_cols = $n_cols-((-$n_words) % $n_cols);
    my @last_c_indexes = (0..($last_n_cols-1));
    my @last_perl_fmta = @perl_fmta[@last_c_indexes];
    my $last_perl_fmt  = join ($c_sep, @last_perl_fmta);

    my $n_lines   = @{$cols[0]};
    my @l_indexes = (0..($n_lines-2));
    my @lines     = map {
                        my $l_no = $_;
                        my @words = map { $_->[$l_no] } @cols;
                        push (@words, $eol_sep);
                        format_args ($perl_fmt, @words)
                    } @l_indexes;
    my $last_line = format_args ($last_perl_fmt, map { $_->[$n_lines-1] } @cols);
    $last_line =~ s/[ \t]*$//g;
    push (@lines, $last_line);
    return @lines;
}

# CLI arguments processing
my ($opt_help,
    $opt_fmt,
    $opt_eol,
    $opt_prefix,
    $opt_separator,
    $opt_textwidth,
);

GetOptionsFromArray(\@ARGV,
    'h|help'         => \$opt_help,
    'f|format=s'     => \$opt_fmt,
    'e|eol=s'        => \$opt_eol,
    'p|prefix=s'     => \$opt_prefix,
    's|separator=s'  => \$opt_separator,
    'w|width=i'      => \$opt_textwidth,
) or croak "Error while parsing command-line arguments";

# Handle help option
pod2usage(-exitval => 0) if ($opt_help);

$opt_fmt       //= 'lll';
$opt_eol       //= " \\";
$opt_prefix    //= '    ';
$opt_separator //= ' ';
$opt_textwidth //= 70;

my @words = ();
while (<>) {
    chomp;
    my @line = ();
    while ($_ ne '') {
        my $word = undef;
        if ($_ =~ s/^[ \t]*\Q$opt_eol\E$//g) {
            last;
        }
        elsif ($_ =~ s/^[ \t]*\Q$opt_separator\E//g) {
            next;
        }
        elsif ($_ =~ s/^[ \t]+//g) {
            next;
        }
        elsif ($_ =~ s/^("([^"\\]|\\.)*")//g) {
            push (@line, $1);
        }
        elsif ($_ =~ s/^('([^'\\]|\\.)*')//g) {
            push (@line, $1);
        }
        elsif ($_ =~ s/^([^ \t]+)//g) {
            push (@line, $1);
        }
        else {
            croak "Unexpected tokens: '".quotemeta($_)."'";
        }
    }
    next if (! @line);
    push (@words, @line);
}

if (0 == @words) {
    exit 0;
}


my @cols  = shuffle_words_in_columns (words => \@words, fmt => $opt_fmt);
my @lines = format_columns_to_lines (cols => \@cols, fmt => $opt_fmt, separator => $opt_separator, eol_separator => $opt_eol, n_words => scalar @words);
foreach my $line (@lines) {
    print $opt_prefix.$line;
}

exit 0;

__END__
=head1 NAME

codefmt - Code Formatter tool

=head1 SYNOPSIS

B<codefmt> B<-h>|B<--help>

B<codefmt> [B<OPTIONS>] [B<FILE> ...]

=head1 DESCRIPTION

This tool format tabular data into fixed size columns.

=head1 OPTIONS

=over

=item B<-h>|B<--help>

Print the usage, help and version information for this program and exit.

=item B<-e> I<EOL-SEPARATOR>|B<--eol>=I<EOL-SEPARATOR>

Sets the end-of-line separator. Default value is: C< \\>.

=item B<-s> I<COLUMN-SEPARATOR>|B<--separator>=I<COLUMN-SEPARATOR>

Sets the end-of-line separator. Default value is: C< >.

=back

=head1 SEE ALSO

fmt(1), column(1), codemv(1)

=head1 AUTHOR

Frederic JARDON <frederic.jardon@gmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2019 by Frederic JARDON <frederic.jardon@gmail.com>

This program is free software; you can redistribute it and/or modify
it under the GPL license.

=cut

